{"version":3,"sources":["components/Modal/Modal.module.css","components/Square/Square.tsx","components/Board/Board.tsx","components/Modal/Modal.tsx","helper/GameHelper.tsx","components/Game/Game.tsx","App.tsx","registerServiceWorker.js","index.tsx"],"names":["module","exports","square","props","className","onClick","value","Board","renderSquare","i","Square","squares","this","status","Component","modal","classes","style","alignContent","content","children","intelligentMove","player","winnerPattern","current","freeCells","moveOpponent","movePlayer","length","a","b","c","includes","firstMove","Game","state","history","Array","fill","xIsNext","stepNumber","handleClick","console","log","slice","calculateWinner","flipXisNext","setState","concat","jumpTo","step","machinePlay","setTimeout","filter","element","index","push","Math","trunc","random","machineMove","playAgainHandler","newHistory","gameOver","winner","gameOverModal","gameOverMsg","Modal","type","height","moves","map","move","desc","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.93f4558d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":\"Modal_style__a5scS\"};","// ****************************\n// renders a sqaure which is basically a cell\n// in a board\n// ****************************\n\nimport React from \"react\";\n\ninterface SquareProps {\n  onClick(): void;\n  value: string;\n}\n\nconst square: React.FC<SquareProps> = props => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n};\n\nexport default square;\n","// *************************************\n// renders a board of 9 squares\n// 3 squares in a row and total 3 rows\n// *************************************\n\nimport React, { Component } from \"react\";\nimport Square from \"../Square/Square\";\n\ninterface BoardProps {\n  squares: string[];\n  onClick(i: number): void;\n  status: string;\n}\n\nclass Board extends Component<BoardProps> {\n  renderSquare = (i: number) => {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{this.props.status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\r\n\r\n// importing style-sheet from css module\r\nimport classes from \"./Modal.module.css\";\r\n\r\ninterface ModalProps {\r\n  content?: JSX.Element;\r\n  children?: JSX.Element;\r\n}\r\n\r\nconst modal: React.FC<ModalProps> = props => {\r\n  return (\r\n    <div className={classes.style}>\r\n      <div style={{ alignContent: \"center\" }}>\r\n        {props.content}\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default modal;\r\n","\r\nexport const intelligentMove = (player: string, winnerPattern:number[][], current: string[], freeCells: number[]): number => {\r\n    let moveOpponent: number = -100;\r\n    let movePlayer: number = -100;\r\n\r\n\r\n    // whichever pattern appers first\r\n    for(let i = 0; i < winnerPattern.length; i++){\r\n        let [a, b, c] = winnerPattern[i];       \r\n        if((current[a] === current[b]) && current[a] !== null){\r\n            if(freeCells.includes(c)){\r\n                if(current[a] === player){\r\n                    movePlayer = c;\r\n                } else{\r\n                    moveOpponent = c;\r\n                }\r\n\r\n            }\r\n        } else if((current[b] === current[c]) && current[b] !== null){\r\n            if(freeCells.includes(a)){\r\n                if(current[b] === player){\r\n                    movePlayer = a;\r\n                } else{\r\n                    moveOpponent = a;\r\n                }\r\n            }\r\n        } else if((current[a] === current[c]) && current[a] !== null){\r\n            if(freeCells.includes(b)){\r\n                if(current[a] === player){\r\n                    movePlayer = b;\r\n                } else{\r\n                    moveOpponent = b;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    let firstMove: number = -100;\r\n    // first moves for winning\r\n    for(let i = 0; i < winnerPattern.length - 1; i++){\r\n        let [a, b, c] = winnerPattern[i];\r\n        if(freeCells.includes(a)){\r\n            firstMove = a;\r\n        } else if(freeCells.includes(b)){\r\n            firstMove = b;\r\n        } else if(freeCells.includes(c)){\r\n            firstMove = c;\r\n        }\r\n    }\r\n\r\n    if(movePlayer > 0){\r\n        return movePlayer;\r\n    } else if(moveOpponent > 0){\r\n        return moveOpponent;\r\n    } else {\r\n        return firstMove;\r\n    }\r\n  }","// *********************************\r\n// for each moves an unique set of moves is create as an array\r\n// this array is passed to check whether it matches with the winner\r\n// pattern.\r\n// renders board and a list of past moves\r\n// **********************************\r\n\r\n/****************************************/\r\n// importing core components\r\nimport React, { Component } from \"react\";\r\n\r\n// importing components\r\nimport Board from \"../Board/Board\";\r\nimport Modal from \"../Modal/Modal\";\r\n\r\n// importing helper methods\r\nimport { intelligentMove } from \"../../helper/GameHelper\" \r\n\r\ninterface GameProps {}\r\n\r\nclass Game extends Component<GameProps> {\r\n  state = {\r\n    history: [{ squares: Array(9).fill(null) }],\r\n    xIsNext: true,\r\n    stepNumber: 0\r\n  };\r\n\r\n  winnerPattern = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n\r\n  handleClick = (i: number) => {\r\n    console.log(\"click handler. i = \" + i);\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (this.calculateWinner(squares)) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    const flipXisNext = !this.state.xIsNext;\r\n    this.setState({\r\n      history: history.concat([{ squares: squares }]),\r\n      xIsNext: flipXisNext,\r\n      stepNumber: history.length\r\n    });\r\n  };\r\n\r\n  calculateWinner = (squares: string[]) => {\r\n    \r\n    for (let i = 0; i < this.winnerPattern.length; i++) {\r\n      const [a, b, c] = this.winnerPattern[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    for(let i = 0; i < squares.length ; i++){\r\n      if(!squares[i]){\r\n        return null;\r\n      }\r\n    }\r\n    return \"No one\";\r\n  };\r\n\r\n  jumpTo = (step: number) => {\r\n    this.setState({ stepNumber: step, xIsNext: step % 2 === 0 ? true : false });\r\n  };\r\n\r\n  machinePlay = () => {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    setTimeout(() => {\r\n      const freeCells: number[] = [];\r\n      squares.filter((element, index) => {\r\n        if (element === null) {\r\n          freeCells.push(index);\r\n        }\r\n        return true;\r\n      });\r\n\r\n      let randomNum = Math.trunc(\r\n        Math.random() * (freeCells.length - 1 - 0 + 1) + 0\r\n      );\r\n      // console.log(\"free spots: \", freeCells, \" random number: \", randomNum);\r\n      // console.log(freeCells[randomNum]);\r\n      let machineMove: number = intelligentMove(\"O\", this.winnerPattern, squares, freeCells);\r\n      //this.handleClick(freeCells[randomNum]);\r\n      this.handleClick(machineMove);\r\n    }, 1000);\r\n  };\r\n\r\n  \r\n\r\n  playAgainHandler = () => {\r\n    console.log(\"playAgainHandler\");\r\n    const newHistory = [{ squares: Array(9).fill(null) }];\r\n    this.setState({\r\n      history: newHistory,\r\n      gameOver: false,\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    });\r\n  };\r\n\r\n  componentDidMount() {}\r\n  componentDidUpdate() {\r\n    // machine move\r\n    if (!this.state.xIsNext) {\r\n      this.machinePlay();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = this.calculateWinner(current.squares);\r\n\r\n    let gameOverModal = null;\r\n\r\n    const gameOverMsg = (\r\n      <p>\r\n        Game Over ! <br /> Winner is {winner}\r\n      </p>\r\n    );\r\n\r\n    if (winner) {\r\n      gameOverModal = (\r\n        <Modal content={gameOverMsg}>\r\n          <button type=\"button\" style={{height: \"15%\"}} onClick={this.playAgainHandler}>\r\n            Play Again\r\n          </button>\r\n        </Modal>\r\n      );\r\n    }\r\n\r\n    // past history\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Go to move # \" + move : \"Go to game start\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            onClick={() => {\r\n              this.jumpTo(move);\r\n            }}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner is: \" + winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        {gameOverModal}\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            status={status}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>Moves</div>\r\n          <div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}